events {}

http {
    # upstream: primary (first) then backup (with role backup)
    upstream backend {
        server app_blue:3000 max_fails=2 fail_timeout=5s;
        server app_green:3000 backup;
    }

    map $upstream_http_x_app_pool $app_pool {
        default $upstream_http_x_app_pool;
    }

    server {
        listen 80;

        # main proxy for all traffic
        location / {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # timeout/tuning - aggressive so failover is quick
            proxy_connect_timeout 1s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;

            # retry other upstream on error/timeout/5xx
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 5s;

            # don't strip upstream headers
            proxy_pass_request_headers on;
        }

        # /version must be proxied to whatever upstream handles it so headers + JSON come from app
        location /version {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 1s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;

            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 5s;

            # keep upstream headers visible to client
            proxy_pass_request_headers on;
        }

        # optional healthcheck for nginx itself
        location = /nginx-health {
            return 200 "nginx ok";
        }
    }
}
